
buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap'}
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
        maven { url "https://dl.bintray.com/soywiz/soywiz" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

allprojects {
	repositories {
        mavenLocal()
		jcenter()
		maven { url 'https://dl.bintray.com/kotlin/kotlin-eap'}
		maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        maven { url "https://dl.bintray.com/kotlin/kotlinx/" }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url 'https://dl.bintray.com/touchlabpublic/kotlin' }
		maven { url "https://dl.bintray.com/soywiz/soywiz" }
        maven { url "https://dl.bintray.com/luca992/kotlin" }
	}
}


apply plugin: 'org.jetbrains.kotlin.multiplatform'
//apply plugin: 'org.jetbrains.kotlin.native.cocoapods'



kotlin {
    targets {
        jvm()
        //fromPreset(presets.linuxX64, 'linux')
        fromPreset(presets.mingwX64, 'windows')
        macosX64('mac')
        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm64, 'iosArm64')
                
		configure([mac,/*linux,*/ windows, iosX64, iosArm64]) {
            binaries {
                executable {
                    // Binary configuration.
                }
            }
            compilations.main.cinterops {
                openssl {
                }
            }
		}
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlin_serialization_version"
                implementation "io.ktor:ktor-client-websockets:$ktor_version"
                implementation "com.soywiz.korlibs.klogger:klogger:$klogger_version"
            }
        }
		jvmMain {
		    dependsOn commonMain
			dependencies {
				implementation 'org.jetbrains.kotlin:kotlin-stdlib'
				implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlin_serialization_version"
				implementation "io.ktor:ktor-client-websockets-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-cio:$ktor_version"
                implementation "ch.qos.logback:logback-classic:1.2.3"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
            }
		}    
		    
		jvmTest {
            dependsOn commonTest
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        
        nativeCommonMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlin_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlin_serialization_version"
            }
        }

        unixMain{
           dependsOn nativeCommonMain
        }

        windowsMain{
           dependsOn nativeCommonMain
        }

        configure([linuxMain, macMain, iosMain]) {
            dependsOn unixMain
        }
        
        configure([iosX64Main, iosArm64Main]) {
            dependsOn iosMain
        }


        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }

		nativeCommonTest{
			dependencies {
			}
		}

        configure([linuxTest, windowsTest, macTest, iosX64Test, iosArm64Test]) {
            dependsOn nativeCommonTest
        }
    }
}


task runProgram {
    def buildType = 'RELEASE' // Change to 'DEBUG' to run application with debug symbols.
//    dependsOn kotlin.targets.mac.compilations.main.linkTaskName('EXECUTABLE', buildType)
//    doLast {
//        exec {
//            executable kotlin.targets.mac.compilations.main.getBinary('EXECUTABLE', buildType)
//            args "$url", "query"
//        }
//    }
}


// Publishing
group 'co.spin'
version projectVersion
apply plugin: 'maven-publish'


def pomBaseData = {
    licenses {
        license {
            name project.property("project.license.name")
            url project.property("project.license.url")
        }
    }
    scm {
        url project.property("project.scm.url")
    }
}

def generatePom = { pom ->
    pom.withXml {
        def root = it.asNode()
        root.appendNode('name', project.name)
        root.appendNode('description', project.property("project.description"))
        root.appendNode('url', project.property("project.scm.url"))
        root.children().last() + pomBaseData
    }
}

ext.generatePom = generatePom

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def publishUser = properties.getProperty('bintrayUser') ?: rootProject.findProperty('BINTRAY_USER') ?: project.findProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
def publishPassword = properties.getProperty('bintrayApiKey') ?: rootProject.findProperty('BINTRAY_KEY') ?: project.findProperty('bintrayApiKey') ?: System.getenv('BINTRAY_API_KEY')

if (publishUser && publishPassword) {
    publishing {
        repositories {
            maven {
                credentials {
                    username publishUser
                    password publishPassword
                }
                url "https://api.bintray.com/maven/luca992/kotlin/${project.property('project.package')}/"
            }
        }

        configure(publications) {
            generatePom(pom)
        }
    }
}
