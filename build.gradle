
buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap'}
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

allprojects {
	repositories {
        mavenLocal()
		jcenter()
		maven { url 'https://dl.bintray.com/kotlin/kotlin-eap'}
		maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
		maven { url "https://dl.bintray.com/kotlin/kotlinx/" }
		maven { url 'https://dl.bintray.com/touchlabpublic/kotlin' }
		maven { url "https://dl.bintray.com/soywiz/soywiz" }

	}
}


apply plugin: 'kotlin-multiplatform'
//apply plugin: 'kotlinx-serialization'



kotlin {

    sourceSets {
        all {
            languageSettings {
                enableLanguageFeature('InlineClasses') // language feature name
                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name
                //progressiveMode = true // false by default
            }
        }
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlin_serialization_version"
    			implementation "com.soywiz:klogger:$klogger_version"
            }
        }

		nativeCommonMain {
		    dependsOn commonMain
			dependencies {
			    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlin_coroutines_version"
			    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlin_serialization_version"
			}
		}

		jvmMain {
		    dependsOn commonMain
			dependencies {
				implementation 'org.jetbrains.kotlin:kotlin-stdlib'
				implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
				implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlin_serialization_version"
				implementation "io.ktor:ktor-client-websocket:$ktor_version"
                implementation "io.ktor:ktor-client-cio:$ktor_version"
                implementation "ch.qos.logback:logback-classic:1.2.3"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
            }
		}
        unixMain

        configure([linuxMain, macMain, /*iosX64Main, iosArm64Main*/]) {
            dependsOn unixMain
        }
        configure([unixMain, windowsMain]) {
            dependsOn nativeCommonMain
        }

        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlin_coroutines_version"
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }

		nativeCommonTest{
			dependencies {
				implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlin_coroutines_version"
			}
		}

        jvmTest {
        	dependsOn commonTest
            dependencies {
            	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        configure([linuxTest, windowsTest, macTest,/* iosX64Test, iosArm64Test*/]) {
            dependsOn nativeCommonTest
        }
    }

    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.linuxX64, 'linux')
        fromPreset(presets.mingwX64, 'windows')
        fromPreset(presets.macosX64, 'mac')
        //fromPreset(presets.iosX64, 'iosX64')
        //fromPreset(presets.iosArm64, 'iosArm64')
                
		configure([linux, windows, mac,/* iosX64, iosArm64*/]) {
			compilations.main.outputKinds( 'EXECUTABLE')
            compilations.main.cinterops {
                openssl {
                    switch (it) {
                        case mac:
                            includeDirs.headerFilterOnly '/opt/local/include', '/usr/local/include'
                            break
                        case linux:
                            includeDirs.headerFilterOnly '/usr/include', '/usr/include/x86_64-linux-gnu'
                            break
                    }
                }
            }
		}
    }
}


task runProgram {
    def buildType = 'RELEASE' // Change to 'DEBUG' to run application with debug symbols.
    dependsOn kotlin.targets.mac.compilations.main.linkTaskName('EXECUTABLE', buildType)
    doLast {
        exec {
            executable kotlin.targets.mac.compilations.main.getBinary('EXECUTABLE', buildType)
            args "$url", "query"
        }
    }
}


// Publishing
group 'co.spin'
version projectVersion
apply plugin: 'maven-publish'


def pomBaseData = {
    licenses {
        license {
            name project.property("project.license.name")
            url project.property("project.license.url")
        }
    }
    scm {
        url project.property("project.scm.url")
    }
}

def generatePom = { pom ->
    pom.withXml {
        def root = it.asNode()
        root.appendNode('name', project.name)
        root.appendNode('description', project.property("project.description"))
        root.appendNode('url', project.property("project.scm.url"))
        root.children().last() + pomBaseData
    }
}

ext.generatePom = generatePom

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def publishUser = properties.getProperty('bintrayUser') ?: rootProject.findProperty('BINTRAY_USER') ?: project.findProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
def publishPassword = properties.getProperty('bintrayApiKey') ?: rootProject.findProperty('BINTRAY_KEY') ?: project.findProperty('bintrayApiKey') ?: System.getenv('BINTRAY_API_KEY')

if (publishUser && publishPassword) {
    publishing {
        repositories {
            maven {
                credentials {
                    username publishUser
                    password publishPassword
                }
                url "https://api.bintray.com/maven/luca992/kotlin/${project.property('project.package')}/"
            }
        }

        configure(publications) {
            generatePom(pom)
        }
    }
}
